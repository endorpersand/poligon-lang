class "#dynarray" {
    buf: #ptr,
    len: int,
    cap: int
}
class string {
    inner: #dynarray
}
class string_chars {
    str: string,
    buf: #ptr
}
class <option<char>> {
    present: bool,
    value: #ptr
}
extern fun "#printf"(arg0: #ptr, ..) -> int;
extern fun print(arg0: string) -> void;
extern fun "#ptrnull"() -> #ptr;
extern fun <#ptr>::null() -> #ptr;
extern fun <string>::chars(arg0: string) -> string_chars;
extern fun <string>::slice_bytes(arg0: string, arg1: int, arg2: int) -> string;
extern fun "#malloc"(arg0: int) -> #ptr;
extern fun <string_chars>::new(arg0: string) -> string_chars;
extern fun <string>::len(arg0: string) -> int;
extern fun <string>::to_string(arg0: string) -> string;
extern fun <string>::add_string(arg0: string, arg1: string) -> string;
extern fun "#mbtowc"(arg0: #ptr, arg1: #ptr, arg2: int) -> int;
extern fun <string_chars>::next(arg0: string_chars) -> option<char>;
extern fun "#memcpy"(arg0: #ptr, arg1: #ptr, arg2: int) -> #ptr;
extern fun <#dynarray>::extend(arg0: #dynarray, arg1: #ptr, arg2: int) -> void;
extern fun <option<char>>::some(arg0: char) -> option<char>;
extern fun "#free"(arg0: #ptr) -> void;
extern fun <#dynarray>::resize(arg0: #dynarray, arg1: int) -> void;
extern fun <option<char>>::to_string(arg0: option<char>) -> string;
extern fun <string>::new() -> string;
extern fun "#asprintf"(arg0: #ptr, arg1: #ptr, ..) -> int;
extern fun <char>::to_string(arg0: char) -> string;
extern fun <#dynarray>::take(arg0: #dynarray, arg1: int) -> #ptr;
extern fun <#dynarray>::new(arg0: int) -> #dynarray;
extern fun <option<char>>::get(arg0: option<char>) -> char;
extern fun <string>::from_raw(arg0: #ptr, arg1: int) -> string;
extern fun <bool>::to_string(arg0: bool) -> string;
extern fun "#smin"(arg0: int, arg1: int) -> int;
extern fun <int>::min(arg0: int, arg1: int) -> int;
extern fun "#isnan"(arg0: float) -> bool;
extern fun <float>::isnan(arg0: float) -> bool;
extern fun "#isinf"(arg0: float) -> bool;
extern fun <float>::isinf(arg0: float) -> bool;
extern fun "#copysign"(arg0: float, arg1: float) -> float;
extern fun <float>::sign(arg0: float) -> float;
extern fun "#nexttoward"(arg0: float, arg1: float) -> float;
extern fun <float>::nexttoward(arg0: float, arg1: float) -> float;
extern fun "#lround"(arg0: float) -> int;
extern fun <float>::iround(arg0: float) -> int;
extern fun "#round"(arg0: float) -> float;
extern fun <float>::round(arg0: float) -> float;
extern fun "#trunc"(arg0: float) -> float;
extern fun <float>::trunc(arg0: float) -> float;
extern fun "#floor"(arg0: float) -> float;
extern fun <float>::floor(arg0: float) -> float;
extern fun "#ceil"(arg0: float) -> float;
extern fun <float>::ceil(arg0: float) -> float;
extern fun "#tgamma"(arg0: float) -> float;
extern fun <float>::tgamma(arg0: float) -> float;
extern fun "#lgamma"(arg0: float) -> float;
extern fun <float>::lgamma(arg0: float) -> float;
extern fun "#erfc"(arg0: float) -> float;
extern fun <float>::erfc(arg0: float) -> float;
extern fun "#erf"(arg0: float) -> float;
extern fun <float>::erf(arg0: float) -> float;
extern fun "#atanh"(arg0: float) -> float;
extern fun <float>::atanh(arg0: float) -> float;
extern fun "#acosh"(arg0: float) -> float;
extern fun <float>::acosh(arg0: float) -> float;
extern fun "#asinh"(arg0: float) -> float;
extern fun <float>::asinh(arg0: float) -> float;
extern fun "#tanh"(arg0: float) -> float;
extern fun <float>::tanh(arg0: float) -> float;
extern fun "#cosh"(arg0: float) -> float;
extern fun <float>::cosh(arg0: float) -> float;
extern fun "#sinh"(arg0: float) -> float;
extern fun <float>::sinh(arg0: float) -> float;
extern fun "#atan2"(arg0: float, arg1: float) -> float;
extern fun <float>::atan2(arg0: float, arg1: float) -> float;
extern fun "#atan"(arg0: float) -> float;
extern fun <float>::atan(arg0: float) -> float;
extern fun "#acos"(arg0: float) -> float;
extern fun <float>::acos(arg0: float) -> float;
extern fun "#asin"(arg0: float) -> float;
extern fun <float>::asin(arg0: float) -> float;
extern fun "#tan"(arg0: float) -> float;
extern fun <float>::tan(arg0: float) -> float;
extern fun "#cos"(arg0: float) -> float;
extern fun <float>::cos(arg0: float) -> float;
extern fun "#sin"(arg0: float) -> float;
extern fun <float>::sin(arg0: float) -> float;
extern fun "#pow"(arg0: float, arg1: float) -> float;
extern fun <float>::powi(arg0: float, arg1: int) -> float;
extern fun <float>::pow(arg0: float, arg1: float) -> float;
extern fun "#hypot"(arg0: float, arg1: float) -> float;
extern fun <float>::hypot(arg0: float, arg1: float) -> float;
extern fun "#cbrt"(arg0: float) -> float;
extern fun <float>::cbrt(arg0: float) -> float;
extern fun "#sqrt"(arg0: float) -> float;
extern fun <float>::sqrt(arg0: float) -> float;
extern fun "#log1p"(arg0: float) -> float;
extern fun <float>::log1p(arg0: float) -> float;
extern fun "#log10"(arg0: float) -> float;
extern fun <float>::log10(arg0: float) -> float;
extern fun "#log2"(arg0: float) -> float;
extern fun <float>::log2(arg0: float) -> float;
extern fun "#log"(arg0: float) -> float;
extern fun <float>::log(arg0: float) -> float;
extern fun "#expm1"(arg0: float) -> float;
extern fun <float>::expm1(arg0: float) -> float;
extern fun "#exp2"(arg0: float) -> float;
extern fun <float>::exp2(arg0: float) -> float;
extern fun "#exp"(arg0: float) -> float;
extern fun <float>::exp(arg0: float) -> float;
extern fun "#minnum"(arg0: float, arg1: float) -> float;
extern fun <float>::min(arg0: float, arg1: float) -> float;
extern fun "#maxnum"(arg0: float, arg1: float) -> float;
extern fun <float>::max(arg0: float, arg1: float) -> float;
extern fun "#fma"(arg0: float, arg1: float, arg2: float) -> float;
extern fun <float>::fma(arg0: float, arg1: float, arg2: float) -> float;
extern fun "#fabs"(arg0: float) -> float;
extern fun <float>::abs(arg0: float) -> float;
extern fun <float>::to_string(arg0: float) -> string;
extern fun "#cttz"(arg0: int, arg1: bool) -> int;
extern fun <int>::trailing_zeroes(arg0: int) -> int;
extern fun "#ctlz"(arg0: int, arg1: bool) -> int;
extern fun <int>::leading_zeroes(arg0: int) -> int;
extern fun "#bswap"(arg0: int) -> int;
extern fun <int>::reverse_bytes(arg0: int) -> int;
extern fun "#bitreverse"(arg0: int) -> int;
extern fun <int>::reverse_bits(arg0: int) -> int;
extern fun "#ctpop"(arg0: int) -> int;
extern fun <int>::count_ones(arg0: int) -> int;
extern fun <int>::sign(arg0: int) -> int;
extern fun <option<char>>::none() -> option<char>;
extern fun "#smax"(arg0: int, arg1: int) -> int;
extern fun <int>::max(arg0: int, arg1: int) -> int;
extern fun "#abs"(arg0: int, arg1: bool) -> int;
extern fun <int>::abs(arg0: int) -> int;
extern fun "#idiv"(arg0: int, arg1: int) -> int;
extern fun <int>::idiv(arg0: int, arg1: int) -> int;
extern fun <int>::to_string(arg0: int) -> string;
