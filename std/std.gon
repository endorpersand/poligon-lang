import intrinsic;

// TODO: unify #dynarray and list[T] when generics are more stable
class #dynarray {
    buf: #ptr,
    len: int,
    cap: int

    fun ::new(cap: int) -> #dynarray {
        let buf = #malloc(cap);
        #dynarray #{
            buf, len: 0, cap
        };
    }

    fun self.resize(new_cap: int) {
        if self.cap < new_cap {
            let cap = new_cap.max(self.cap * 2);

            let old_buf = self.buf;
            let new_buf = #malloc(cap);
            #memcpy(new_buf, old_buf, self.len);
            self.buf = new_buf;
            self.cap = cap;
            #free(old_buf);
        }
    }

    fun self.extend(add_buf: #ptr, add_len: int) {
        self.resize(self.len + add_len);

        let shift_buf = #byte::#gep(self.buf, self.len);
        #memcpy(shift_buf, add_buf, add_len);

        self.len = self.len + add_len;
    }

    fun self.take(sub_len: int) -> #ptr {
        if self.len >= sub_len {
            self.len = self.len - sub_len;
            #byte::#gep(self.buf, self.len);
        } else {
            throw "cannot take element from array";
        }
    }
}

class string {
    inner: #dynarray
    fun ::new() -> string {
        string #{ inner: #dynarray::new(0) };
     }
    fun ::from_raw(contents: #ptr, len: int) -> string {
        let inner = #dynarray::new(len);
        inner.extend(contents, len);

        string #{ inner };
    }
    
    fun self.len() -> int {
        self.inner.len;
    }

    fun self.add_string(other: string) -> string {
        let new_len = self.len() + other.len();
        let result_inner = #dynarray::new(new_len);

        result_inner.extend(self.inner.buf, self.len());
        result_inner.extend(other.inner.buf, other.len());

        string #{
            inner: result_inner
        };
    }

    fun self.to_string() -> string {
        self;
    }
    
    fun self.slice_bytes(start: int, end: int) -> string {
        if 0 <= start && start <= end && end <= self.len() {
            string #{
                inner: #dynarray #{
                    buf: #byte::#gep(self.inner.buf, start),
                    len: end - start,
                    cap: self.inner.cap - start
                }
            };
        } else {
            throw "invalid slice";
        }
    }

    fun self.chars() -> string_chars {
        string_chars::new(self);
    }
    fun self.contains_char(m: char) -> bool {
        for ch in self.chars() {
            if ch == m { return true; }
        }
        return false;
    }
    fun self.get(i: int) -> char {
        if 0 <= i && i < self.len() {
            let c = 0;
            let chars = self.chars();
            while c < i {
                chars.next();
                c = c + 1;
            }
            chars.next().get();
        } else {
            throw "array index out of bounds";
        }
    }
}

class string_chars {
    str: string,
    buf: #ptr

    fun ::new(str: string) -> string_chars {
        string_chars #{
            str, buf: #malloc(char::size_of())
        };
    }

    fun self.next() -> option[char] {
        if self.str.len() == 0 {
            option[char]::none();
        } else {
            let bytes_read = #mbtowc(self.buf, self.str.inner.buf, 6.min(self.str.len()));

            if bytes_read < 1 {
                self.str = string::new();
                option[char]::none();
            } else {
                self.str = self.str.slice_bytes(bytes_read, self.str.len());

                let chr: char = *self.buf;
                option[char]::some(chr);
            }
        }
    }
}

class list[T] {
    inner: #dynarray

    fun ::new() -> list[T] {
        list[T] #{ inner: #dynarray::new(0) };
    }
    fun ::from_raw(contents: #ptr, len: int) -> list[T] {
        let inner = #dynarray::new(len * T::size_of());
        inner.extend(contents, len * T::size_of());

        list[T] #{ inner };
    }

    fun self.len() -> int {
        self.inner.len.idiv(T::size_of());
    }
    fun self.push(e: T) {
        let buf = T::#alloca();
        *buf = e;
        self.inner.extend(buf, T::size_of());
    }
    fun self.pop() -> T {
        *self.inner.take(T::size_of());
    }
    
    fun self.extend(lst: list[T]) {
        for e in lst.iterator() {
            self.push(e);
        }
    }
    fun self.get(i: int) -> T {
        if 0 <= i && i < self.len() {
            *T::#gep(self.inner.buf, i);
        } else {
            throw "array index out of bounds";
        }
    }
    fun self.set(i: int, t: T) {
        if 0 <= i && i < self.len() {
            *T::#gep(self.inner.buf, i) = t;
        } else {
            throw "array index out of bounds";
        }
    }
    fun self.to_string() -> string {
        if self.len() == 0 {
            "[]";
        } else {
            let result = "[";
            let it = self.iterator();

            result = result + it.next().get();
            for e in it {
                result = result + ", " + e;
            }
            result = result + "]";

            result;
        }
    }

    fun self.iterator() -> listiterator[T] {
        listiterator[T]::new(self);
    }
}
class option[T] {
    present: bool,
    value: #ptr

    fun ::some(t: T) -> option[T] {
        let value = #malloc(T::size_of());
        *value = t;
        option[T] #{ present: true, value };
    }
    fun ::none() -> option[T] {
        option[T] #{ present: false, value: #ptr::null() };
    }
    fun self.get() -> T {
        if self.present {
            *self.value;
        } else {
            throw "no value present";
        }
    }
    fun self.to_string() -> string {
        if self.present {
            let value: T = *self.value;
            "some(" + value + ")";
        } else {
            "none";
        }
    }
}
class listiterator[T] {
    inner: list[T],
    i: int

    fun ::new(inner: list[T]) -> listiterator[T] {
        listiterator[T] #{
            inner, i: 0
        };
    }

    fun self.next() -> option[T] {
        if self.i >= self.inner.len() {
            option[T]::none();
        } else {
            let t = option[T]::some(self.inner.get(self.i));
            self.i = self.i + 1;
            t;
        }
    }
}

global _tmpl_print = "%.*s\n\0";

fun print(s: string) {
    #printf(_tmpl_print, s.inner.len, s.inner.buf);
}

global _tmpl_int_to_string   = "%d\0";
global _tmpl_float_to_string = "%#f\0";
global _tmpl_char_to_string  = "%lc\0";
global _tmpl_byte_to_string  = "%#hhx\0";
global _tmpl_ptr_to_string   = "ptr %#lx\0";

fit class int {
    fun self.to_string() -> string {
        let buf_ptr = #ptr::#alloca();
        let len = #asprintf(buf_ptr, _tmpl_int_to_string, self);

        string #{
            inner: #dynarray #{ 
                buf: *buf_ptr, 
                len, 
                cap: len + 1 
            }
        };
    }

    fun self.idiv(d: int) -> int {
        if d == 0 {
            throw "division by zero error";
        } else {
            #idiv(self, d);
        }
    }
    fun self.abs() -> int {
        #abs(self, false);
    }
    fun self.max(o: int) -> int {
        #smax(self, o);
    }
    fun self.min(o: int) -> int {
        #smin(self, o);
    }
    fun self.sign() -> int {
        if self > 0 {
            1;
        } else if self < 0 {
            -1;
        } else {
            0;
        }
    }
    fun self.count_ones() -> int {
        #ctpop(self);
    }
    fun self.reverse_bits() -> int {
        #bitreverse(self);
    }
    fun self.reverse_bytes() -> int {
        #bswap(self);
    }
    fun self.leading_zeroes() -> int {
        #ctlz(self, false);
    }
    fun self.trailing_zeroes() -> int {
        #cttz(self, false);
    }
}

fit class float {
    fun self.to_string() -> string {
        let buf_ptr = #ptr::#alloca();
        let len = #asprintf(buf_ptr, _tmpl_float_to_string, self);

        string #{
            inner: #dynarray #{ 
                buf: *buf_ptr, 
                len, 
                cap: len + 1 
            }
        };
    }

    fun self.abs() -> float {
        #fabs(self);
    }
    fun self.fma(multiplicand: float, addend: float) -> float {
        #fma(self, multiplicand, addend);
    }
    fun self.max(o: float) -> float {
        #maxnum(self, o);
    }
    fun self.min(o: float) -> float {
        #minnum(self, o);
    }
    fun self.exp() -> float {
        #exp(self);
    }
    fun self.exp2() -> float {
        #exp2(self);
    }
    fun self.expm1() -> float {
        #expm1(self);
    }
    fun self.log() -> float {
        #log(self);
    }
    fun self.log2() -> float {
        #log2(self);
    }
    fun self.log10() -> float {
        #log10(self);
    }
    fun self.log1p() -> float {
        #log1p(self);
    }
    fun self.sqrt() -> float {
        #sqrt(self);
    }
    fun self.cbrt() -> float {
        #cbrt(self);
    }
    fun self.hypot(y: float) -> float {
        #hypot(self, y);
    }
    fun self.pow(exp: float) -> float {
        #pow(self, exp);
    }
    fun self.powi(exp: int) -> float {
        #pow(self, exp);
    }
    fun self.sin() -> float {
        #sin(self);
    }
    fun self.cos() -> float {
        #cos(self);
    }
    fun self.tan() -> float {
        #tan(self);
    }
    fun self.asin() -> float {
        #asin(self);
    }
    fun self.acos() -> float {
        #acos(self);
    }
    fun self.atan() -> float {
        #atan(self);
    }
    fun self.atan2(x: float) -> float {
        #atan2(self, x);
    }
    fun self.sinh() -> float {
        #sinh(self);
    }
    fun self.cosh() -> float {
        #cosh(self);
    }
    fun self.tanh() -> float {
        #tanh(self);
    }
    fun self.asinh() -> float {
        #asinh(self);
    }
    fun self.acosh() -> float {
        #acosh(self);
    }
    fun self.atanh() -> float {
        #atanh(self);
    }
    fun self.erf() -> float {
        #erf(self);
    }
    fun self.erfc() -> float {
        #erfc(self);
    }
    fun self.lgamma() -> float {
        #lgamma(self);
    }
    fun self.tgamma() -> float {
        #tgamma(self);
    }
    fun self.ceil() -> float {
        #ceil(self);
    }
    fun self.floor() -> float {
        #floor(self);
    }
    fun self.trunc() -> float {
        #trunc(self);
    }
    fun self.round() -> float {
        #round(self);
    }
    fun self.iround() -> int {
        #lround(self);
    }
    fun self.nexttoward(twd: float) -> float {
        #nexttoward(self, twd);
    }
    fun self.sign() -> float {
        #copysign(1, self);
    }
    fun self.isinf() -> bool {
        #isinf(self);
    }
    fun self.isnan() -> bool {
        #isnan(self);
    }
}

fit class char {
    fun self.to_string() -> string {
        let buf_ptr = #ptr::#alloca();
        let len = #asprintf(buf_ptr, _tmpl_char_to_string, self);

        string #{
            inner: #dynarray #{ 
                buf: *buf_ptr, 
                len, 
                cap: len + 1 
            }
        };
    }
}

fit class bool {
    fun self.to_string() -> string {
        if self {
            "true";
        } else {
            "false";
        }
    }
}

fit class #byte {
    fun self.to_string() -> string {
        let buf_ptr = #ptr::#alloca();
        let len = #asprintf(buf_ptr, _tmpl_byte_to_string, self);

        string #{
            inner: #dynarray #{ 
                buf: *buf_ptr, 
                len, 
                cap: len + 1 
            }
        };
    }
}

fit class #ptr {
    fun ::null() -> #ptr {
        #ptrnull();
    }

    fun self.to_string() -> string {
        let buf_ptr = #ptr::#alloca();
        let len = #asprintf(buf_ptr, _tmpl_ptr_to_string, self);

        string #{
            inner: #dynarray #{ 
                buf: *buf_ptr, 
                len, 
                cap: len + 1 
            }
        };
    }
}