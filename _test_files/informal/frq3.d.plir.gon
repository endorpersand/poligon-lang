class "#dynarray" {
    buf: #ptr,
    len: int,
    cap: int
}
class string {
    inner: #dynarray
}
class string_chars {
    str: string,
    buf: #ptr
}
class <option<char>> {
    present: bool,
    value: #ptr
}
class Review {
    rating: int,
    comment: string
}
class <list<Review>> {
    inner: #dynarray
}
class ReviewAnalysis {
    all_reviews: list<Review>
}
class <list<string>> {
    inner: #dynarray
}
class <listiterator<string>> {
    inner: list<string>,
    i: int
}
class <option<string>> {
    present: bool,
    value: #ptr
}
class <listiterator<Review>> {
    inner: list<Review>,
    i: int
}
class <option<Review>> {
    present: bool,
    value: #ptr
}
extern fun print(arg0: string) -> void;
extern fun <#ptr>::to_string(arg0: #ptr) -> string;
extern fun <string>::get(arg0: string, arg1: int) -> char;
extern fun <string>::contains_char(arg0: string, arg1: char) -> bool;
extern fun <option<char>>::get(arg0: option<char>) -> char;
extern fun <option<char>>::to_string(arg0: option<char>) -> string;
extern fun <string_chars>::next(arg0: string_chars) -> option<char>;
extern fun <string>::add_string(arg0: string, arg1: string) -> string;
extern fun <option<char>>::some(arg0: char) -> option<char>;
extern fun <#dynarray>::extend(arg0: #dynarray, arg1: #ptr, arg2: int) -> void;
extern fun <string_chars>::new(arg0: string) -> string_chars;
extern fun <#dynarray>::resize(arg0: #dynarray, arg1: int) -> void;
extern fun <string>::to_string(arg0: string) -> string;
extern fun <int>::max(arg0: int, arg1: int) -> int;
extern fun <string>::len(arg0: string) -> int;
extern fun <string>::from_raw(arg0: #ptr, arg1: int) -> string;
extern fun <int>::min(arg0: int, arg1: int) -> int;
extern fun <#dynarray>::take(arg0: #dynarray, arg1: int) -> #ptr;
extern fun <#dynarray>::new(arg0: int) -> #dynarray;
extern fun <string>::new() -> string;
extern fun <string>::chars(arg0: string) -> string_chars;
extern fun <#ptr>::null() -> #ptr;
extern fun <#byte>::to_string(arg0: #byte) -> string;
extern fun <bool>::to_string(arg0: bool) -> string;
extern fun <string>::slice_bytes(arg0: string, arg1: int, arg2: int) -> string;
extern fun <float>::isnan(arg0: float) -> bool;
extern fun <float>::isinf(arg0: float) -> bool;
extern fun <float>::sign(arg0: float) -> float;
extern fun <float>::nexttoward(arg0: float, arg1: float) -> float;
extern fun <float>::iround(arg0: float) -> int;
extern fun <float>::round(arg0: float) -> float;
extern fun <float>::trunc(arg0: float) -> float;
extern fun <float>::floor(arg0: float) -> float;
extern fun <float>::ceil(arg0: float) -> float;
extern fun <float>::tgamma(arg0: float) -> float;
extern fun <float>::lgamma(arg0: float) -> float;
extern fun <float>::erfc(arg0: float) -> float;
extern fun <float>::erf(arg0: float) -> float;
extern fun <float>::atanh(arg0: float) -> float;
extern fun <float>::acosh(arg0: float) -> float;
extern fun <float>::asinh(arg0: float) -> float;
extern fun <float>::tanh(arg0: float) -> float;
extern fun <float>::cosh(arg0: float) -> float;
extern fun <float>::sinh(arg0: float) -> float;
extern fun <float>::atan2(arg0: float, arg1: float) -> float;
extern fun <float>::atan(arg0: float) -> float;
extern fun <float>::acos(arg0: float) -> float;
extern fun <float>::asin(arg0: float) -> float;
extern fun <float>::tan(arg0: float) -> float;
extern fun <float>::cos(arg0: float) -> float;
extern fun <float>::sin(arg0: float) -> float;
extern fun <float>::powi(arg0: float, arg1: int) -> float;
extern fun <float>::pow(arg0: float, arg1: float) -> float;
extern fun <float>::hypot(arg0: float, arg1: float) -> float;
extern fun <float>::cbrt(arg0: float) -> float;
extern fun <float>::sqrt(arg0: float) -> float;
extern fun <float>::log1p(arg0: float) -> float;
extern fun <float>::log10(arg0: float) -> float;
extern fun <float>::log2(arg0: float) -> float;
extern fun <float>::log(arg0: float) -> float;
extern fun <float>::expm1(arg0: float) -> float;
extern fun <float>::exp2(arg0: float) -> float;
extern fun <float>::exp(arg0: float) -> float;
extern fun <float>::min(arg0: float, arg1: float) -> float;
extern fun <float>::max(arg0: float, arg1: float) -> float;
extern fun <float>::fma(arg0: float, arg1: float, arg2: float) -> float;
extern fun <float>::abs(arg0: float) -> float;
extern fun <float>::to_string(arg0: float) -> string;
extern fun <int>::trailing_zeroes(arg0: int) -> int;
extern fun <int>::leading_zeroes(arg0: int) -> int;
extern fun <int>::reverse_bytes(arg0: int) -> int;
extern fun <int>::reverse_bits(arg0: int) -> int;
extern fun <int>::count_ones(arg0: int) -> int;
extern fun <int>::sign(arg0: int) -> int;
extern fun <option<char>>::none() -> option<char>;
extern fun <char>::to_string(arg0: char) -> string;
extern fun <int>::abs(arg0: int) -> int;
extern fun <int>::idiv(arg0: int, arg1: int) -> int;
extern fun <int>::to_string(arg0: int) -> string;
extern fun main() -> void;
extern fun <Review>::to_string(arg0: Review) -> string;
extern fun <list<string>>::to_string(arg0: list<string>) -> string;
extern fun <list<string>>::len(arg0: list<string>) -> int;
extern fun <option<string>>::get(arg0: option<string>) -> string;
extern fun <option<string>>::to_string(arg0: option<string>) -> string;
extern fun <listiterator<string>>::next(arg0: listiterator<string>) -> option<string>;
extern fun <list<string>>::get(arg0: list<string>, arg1: int) -> string;
extern fun <option<string>>::some(arg0: string) -> option<string>;
extern fun <list<string>>::iterator(arg0: list<string>) -> listiterator<string>;
extern fun <list<string>>::set(arg0: list<string>, arg1: int, arg2: string) -> void;
extern fun <listiterator<string>>::new(arg0: list<string>) -> listiterator<string>;
extern fun <option<string>>::none() -> option<string>;
extern fun <list<string>>::extend(arg0: list<string>, arg1: list<string>) -> void;
extern fun <list<string>>::pop(arg0: list<string>) -> string;
extern fun <list<string>>::push(arg0: list<string>, arg1: string) -> void;
extern fun <ReviewAnalysis>::collect_comments(arg0: ReviewAnalysis) -> list<string>;
extern fun <list<string>>::from_raw(arg0: #ptr, arg1: int) -> list<string>;
extern fun <listiterator<Review>>::next(arg0: listiterator<Review>) -> option<Review>;
extern fun <option<Review>>::to_string(arg0: option<Review>) -> string;
extern fun <option<Review>>::some(arg0: Review) -> option<Review>;
extern fun <list<Review>>::len(arg0: list<Review>) -> int;
extern fun <list<Review>>::get(arg0: list<Review>, arg1: int) -> Review;
extern fun <list<Review>>::iterator(arg0: list<Review>) -> listiterator<Review>;
extern fun <ReviewAnalysis>::get_average_rating(arg0: ReviewAnalysis) -> float;
extern fun <listiterator<Review>>::new(arg0: list<Review>) -> listiterator<Review>;
extern fun <list<string>>::new() -> list<string>;
extern fun <list<Review>>::to_string(arg0: list<Review>) -> string;
extern fun <list<Review>>::set(arg0: list<Review>, arg1: int, arg2: Review) -> void;
extern fun <option<Review>>::get(arg0: option<Review>) -> Review;
extern fun <list<Review>>::extend(arg0: list<Review>, arg1: list<Review>) -> void;
extern fun <list<Review>>::pop(arg0: list<Review>) -> Review;
extern fun <list<Review>>::push(arg0: list<Review>, arg1: Review) -> void;
extern fun <option<Review>>::none() -> option<Review>;
extern fun <list<Review>>::from_raw(arg0: #ptr, arg1: int) -> list<Review>;
extern fun <list<Review>>::new() -> list<Review>;
