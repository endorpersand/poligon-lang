import intrinsic;

class list<T> {
    inner: #dynarray

    fun ::new() -> list<T> {
        <list<T>> #{ inner: #dynarray::new(0) };
    }
    fun ::from_raw(contents: #ptr, len: int) -> list<T> {
        let inner = #dynarray::new(len * T::size_of());
        inner.extend(contents, len * T::size_of());

        <list<T>> #{ inner };
    }

    fun self.len() -> int {
        self.inner.len.idiv(T::size_of());
    }
    fun self.push(e: T) {
        let buf = T::#alloca();
        *buf = e;
        self.inner.extend(buf, T::size_of());
    }
    fun self.pop() -> T {
        *self.inner.take(T::size_of());
    }
    
    fun self.extend(lst: list<T>) {
        for e in lst.iterator() {
            self.push(e);
        }
    }
    fun self.get(i: int) -> T {
        if 0 <= i && i < self.len() {
            *T::#gep(self.inner.buf, i);
        } else {
            throw "array index out of bounds";
        }
    }
    fun self.set(i: int, t: T) {
        if 0 <= i && i < self.len() {
            *T::#gep(self.inner.buf, i) = t;
        } else {
            throw "array index out of bounds";
        }
    }
    fun self.to_string() -> string {
        if self.len() == 0 {
            "[]";
        } else {
            let result = "[";
            let it = self.iterator();

            result = result + it.next().get();
            for e in it {
                result = result + ", " + e;
            }
            result = result + "]";

            result;
        }
    }

    fun self.iterator() -> listiterator<T> {
        <listiterator<T>>::new(self);
    }
}
class option<T> {
    present: bool,
    value: #ptr

    fun ::some(t: T) -> option<T> {
        let value = #malloc(T::size_of());
        *value = t;
        <option<T>> #{ present: true, value };
    }
    fun ::none() -> option<T> {
        <option<T>> #{ present: false, value: #ptr::null() };
    }
    fun self.get() -> T {
        if self.present {
            *self.value;
        } else {
            throw "no value present";
        }
    }
    fun self.to_string() -> string {
        if self.present {
            let value: T = *self.value;
            "some(" + value + ")";
        } else {
            "none";
        }
    }
}
class listiterator<T> {
    inner: list<T>,
    i: int

    fun ::new(inner: list<T>) -> listiterator<T> {
        <listiterator<T>> #{
            inner, i: 0
        };
    }

    fun self.next() -> option<T> {
        if self.i >= self.inner.len() {
            <option<T>>::none();
        } else {
            let t = <option<T>>::some(self.inner.get(self.i));
            self.i = self.i + 1;
            t;
        }
    }
}

class union<A, B> {
    inner: #ptr,
    _left: bool

    fun ::left(a: A) -> union<A, B> {
        let inner = #malloc(A::size_of().max(B::size_of()));
        *inner = a;

        <union<A, B>> #{ inner, _left: true };
    }

    fun ::right(b: B) -> union<A, B> {
        let inner = #malloc(A::size_of().max(B::size_of()));
        *inner = b;

        <union<A, B>> #{ inner, _left: false };
    }

    fun self.is_left() -> bool {
        self._left;
    }
    fun self.is_right() -> bool {
        !self._left;
    }
    fun self.to_string() -> string {
        let a = #ptr::#alloca();
        *a = self.inner;
        let b: int = *a;

        "<union @ " + b + ">";
    }
}

fit class list<int> {
    fun self.sum() -> int {
        let result = 0;
        for el in self.iterator() {
            result = result + el;
        }
        
        result;
    }
}

fun main() {
    let a = [1, 2, 3, 4, 5];
    print(a);

    let b = #malloc(8);
    *b = 9187201950435737471;
    let c: #byte = *b;
    print(c);
    print(a.inner.buf);

    let e = c + 14;
    print(e);
}