import intrinsic;
class list<T> {
    inner: #dynarray

    fun ::new() -> list<T> {
        <list<T>> #{ inner: #dynarray::new(0) };
    }
    fun ::from_raw(contents: #ptr, len: int) -> list<T> {
        let inner = #dynarray::new(len * T::size_of());
        inner.extend(contents, len * T::size_of());

        <list<T>> #{ inner };
    }

    fun self.len() -> int {
        self.inner.len.idiv(T::size_of());
    }
    fun self.push(e: T) {
        let buf = T::#alloca();
        *buf = e;
        self.inner.extend(buf, T::size_of());
    }
    fun self.pop() -> T {
        *self.inner.take(T::size_of());
    }
    
    fun self.extend(lst: list<T>) {
        for e in lst.iterator() {
            self.push(e);
        }
    }
    fun self.get(i: int) -> T {
        if 0 <= i && i < self.len() {
            *T::#gep(self.inner.buf, i);
        } else {
            throw "array index out of bounds";
        }
    }
    fun self.set(i: int, t: T) {
        if 0 <= i && i < self.len() {
            *T::#gep(self.inner.buf, i) = t;
        } else {
            throw "array index out of bounds";
        }
    }
    fun self.to_string() -> string {
        if self.len() == 0 {
            "[]";
        } else {
            let result = "[";
            let it = self.iterator();

            result = result + it.next().get();
            for e in it {
                result = result + ", " + e;
            }
            result = result + "]";

            result;
        }
    }

    fun self.iterator() -> listiterator<T> {
        <listiterator<T>>::new(self);
    }
}
class option<T> {
    present: bool,
    value: #ptr

    fun ::some(t: T) -> option<T> {
        let value = #malloc(T::size_of());
        *value = t;
        <option<T>> #{ present: true, value };
    }
    fun ::none() -> option<T> {
        <option<T>> #{ present: false, value: #ptr::null() };
    }
    fun self.get() -> T {
        if self.present {
            *self.value;
        } else {
            throw "no value present";
        }
    }
    fun self.to_string() -> string {
        if self.present {
            let value: T = *self.value;
            "some(" + value + ")";
        } else {
            "none";
        }
    }
}
class listiterator<T> {
    inner: list<T>,
    i: int

    fun ::new(inner: list<T>) -> listiterator<T> {
        <listiterator<T>> #{
            inner, i: 0
        };
    }

    fun self.next() -> option<T> {
        if self.i >= self.inner.len() {
            <option<T>>::none();
        } else {
            let t = <option<T>>::some(self.inner.get(self.i));
            self.i = self.i + 1;
            t;
        }
    }
}

class Review {
    rating: int,
    comment: string
}

class ReviewAnalysis {
    all_reviews: list<Review>

    fun self.get_average_rating() -> float {
        let sum = 0;
        for review in self.all_reviews.iterator() {
            sum = sum + review.rating;
        }
        sum / self.all_reviews.len();
    }
    fun self.collect_comments() -> list<string> {
        let comments: list<string> = [];

        let i = 0;
        for review in self.all_reviews.iterator() {
            if review.comment.contains_char('!') {
                let comment = i + "-" + review.comment;
                if comment.get(comment.len() - 1) != '!' && comment.get(comment.len() - 1) != '.' {
                    comment = comment + '.';
                } else {
                    comment;
                }
                comments.push(comment);
            }
            i = i + 1;
        }

        comments;
    }
}

fun main() {
    let analysis = ReviewAnalysis #{
        all_reviews: [
            Review #{ rating: 4, comment: "Good! Thx" },
            Review #{ rating: 3, comment: "OK site" },
            Review #{ rating: 5, comment: "Great!" },
            Review #{ rating: 2, comment: "Poor! Bad." },
            Review #{ rating: 3, comment: "" },
        ]
    };

    print(analysis.get_average_rating());
    print(analysis.collect_comments());
}


fit class Review {
    fun self.to_string() -> string {
        self.comment + " (" + self.rating + ")";
    }
}