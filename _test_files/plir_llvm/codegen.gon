//! TEST basic_if
extern fun int__to_string(s: int) -> string;
fun test1v(a: bool) {
    if a {
        print(int__to_string(2));
    }
}

fun test2v(a: bool) {
    if a {
        print(int__to_string(2));
    } else {
        print(int__to_string(3));
    }
}
fun test2(a: bool) -> int {
    if a {
        2;
    } else {
        3;
    }
}
fun test3(a: bool, b: bool) -> int {
    if a {
        2;
    } else if b {
        3;
    } else {
        4;
    }
}
fun test13(a: bool) -> int {
    if a {
        2; 
    } else if a {
        3;
    } else if a {
        4;
    } else if a {
        5;
    } else if a {
        6;
    } else if a {
        7;
    } else if a {
        8;
    } else if a {
        9;
    } else if a {
        10;
    } else if a {
        11;
    } else if a {
        12;
    } else if a {
        13;
    } else {
        14;
    }
}
fun main() {
    test1v(true);
    test2v(false);
    print(int__to_string(test2(false)));
    print(int__to_string(test3(true, true)));
    print(int__to_string(test13(false)));
}

//! TEST basic_while
extern fun int__to_string(s: int) -> string;

let i = 0;
while i < 10 {
    print(int__to_string(i));
    print("");
    i = i + 1;
}

//! TEST basic_access
extern fun int__to_string(s: int) -> string;

let a = 14;

print(int__to_string(a));
{
    print(int__to_string(a));
    {
        let a = 15;
        print(int__to_string(a));
    }
    print(int__to_string(a));
}


//! TEST basic_pattern
//! IGNORE compiler
let [a, .., b] = [1, 2, 3, 4];
let [a, ..b, c] = [1, 2, 3, 4];

a = 4;
[a, b, c, .., d, e, f] = [1, 2, 3, 4, 5, 6, 7, 8, 9];

//! TEST basic_arith_chain
((1 + (2 + 3) * 4) - 5) * 7 / 7;

//! TEST basic_logic_cmp
fun print_bool(b: bool) {
    print(if b { "true"; } else { "false"; });
}

fun bool2a(a: bool, b: bool) -> bool {
    a && b;
}
fun bool2o(a: bool, b: bool) -> bool {
    a || b;
}

fun cmp2(a: int, b: int) -> bool {
    a < b;
}

fun cmp3(a: int, b: int, c: int) -> bool {
    a < b < c;
}
fun cmp7(a: int, b: int, c: int, d: int, e: int, f: int, g: int) -> bool {
    a < b < c < d == e < f > g;
}

fun main() {
    print_bool(bool2a(true, false));
    print_bool(bool2o(true, false));
    print_bool(cmp2(1, 2));
    print_bool(cmp3(1, 2, 3));
    print_bool(cmp7(1, 2, 3, 4, 4, 5, 4));
}

//! TEST basic_block
let a = {
    let b = {
        let c = {
            5;
        };

        c;
    };

    b;
};

//! TEST basic_extern
print("hello!");

//! TEST fun_recursion_inf
fun a() { a(); }
fun b1() { b2(); }
fun b2() { b1(); }

//! TEST recursive_fib
extern fun int__to_string(s: int) -> string;

fun fib(n: int) -> int {
    if n < 2 { return n; }
    return fib(n - 1) + fib(n - 2); 
}

fun main() {
    print(int__to_string(fib(20)));
}

//! TEST hoist_block
extern fun int__to_string(s: int) -> string;

fun compute(n: int) -> int {
    return double(n) + 1;
    
    fun double(n: int) -> int { n * 2; }
}

fun main() {
    let calc = compute(10);
    print(int__to_string(calc));
}

//! TEST hoist_block_fail
extern fun int__to_string(s: int) -> string;

fun compute(n: int) -> int {
    return double(n) + 1;
    
    fun double(n: int) -> int { n * 2; }
}

fun main() {
    let dbl = double(10);
    let calc = compute(dbl);
    print(int__to_string(calc));
}