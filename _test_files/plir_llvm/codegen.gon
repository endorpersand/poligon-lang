//! TEST basic_if
if true {
    2;
} else {
    3;
}

//! TEST basic_pattern
let [a, .., b] = [1, 2, 3, 4];
let [a, ..b, c] = [1, 2, 3, 4];

a = 4;
[a, b, c, .., d, e, f] = [1, 2, 3, 4, 5, 6, 7, 8, 9];

//! TEST basic_arith_chain
((1 + (2 + 3) * 4) - 5) * 7 / 7;

//! TEST basic_block
let a = {
    let b = {
        let c = {
            5;
        };

        c;
    };

    b;
};

//! TEST basic_extern
extern fun print(s: string);
print("hello!");

//! TEST fun_recursion_inf
fun a() { a(); }
fun b1() { b2(); }
fun b2() { b1(); }

//! TEST recursive_fib
extern fun printd(s: int);

fun fib(n: int) -> int {
    if n < 2 { return n; }
    return fib(n - 1) + fib(n - 2); 
}

fun main() {
    printd(fib(20));
}

//! TEST hoist_block
fun a() {
    return b();
    
    fun b() {}
}